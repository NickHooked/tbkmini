#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NUFU 1
#define SYM 2
#define NAV 3
#define MED 4
#define POI 5
#define SCR 6
#define SNI 7

// &sl {
//   release-after-ms = <250>;
// };

// &mt {
//     tapping-term-ms = <200>;
//     require-prior-idle-ms = <150>;
// };

/ {
      behaviors {
        c_c_hm_l: homerow_left_mod {
            compatible = "zmk,behavior-hold-tap";
            quick-tap-ms = <150>; // tap held if same key is pressed twice within that time
            tapping-term-ms = <250>;
            require-prior-idle-ms = <150>; // tap if prev non modifier key was pressed within that time
            flavor = "balanced"; // hold if another key is both pressed and released within the tapping term
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release; // delay positional check until key-release
        };

        c_c_hm_r: homerow_right_mod {
            compatible = "zmk,behavior-hold-tap";
            quick-tap-ms = <150>; // tap held if same key is pressed twice within that time
            tapping-term-ms = <250>;
            require-prior-idle-ms = <150>; // tap if prev non modifier key was pressed within that time
            flavor = "balanced"; // hold if another key is both pressed and released within the tapping term
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release; // delay positional check until key-release
        };

        c_c_lt: layer_tab {
            compatible = "zmk,behavior-hold-tap";
            quick-tap-ms = <150>; // tap held if same key is pressed twice within that time
            tapping-term-ms = <125>; // tap if key was pressed within that time
            flavor = "hold-preferred";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
        Base {
            label = "Base";
            bindings = <
              &c_lt SCR Q  &c_lt SNI W  &kp E  &kp R  &kp T                 &kp Y  &kp U  &kp I  &kp O  &kp P  
              &c_hm_l LAc_lt A  &c_hm_l LCTRL S  &c_hm_l LGUI D &c_hm_l LSHFT F       &kp G &kp H  &c_hm_r RSHFT J  &c_hm_r RGUI K  &c_hm_r RCTRL L  &c_hm_r RAc_lt SEMICOLON  
              &c_lt POI Z  &kp X  &kp C  &kp V  &kp B                     &kp N  &kp M  &kp COMMA  &kp DOT  &c_lt POI SLASH
                &c_lt NUFU TAB  &c_lt SYM SPACE &c_lt MED ESC                 &kp BACKSPACE &c_lt NAV ENTER &c_lt MED ESC
            >;
        };

         NuFu {
            label = "Numeral/Function";
            bindings = <
                &kp N1  &kp N2  &kp N3  &kp N4 &kp N5        &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
                &kp F1  &kp F2  &kp F3  &kp F4 &kp F5        &kp SLASH  &kp N4  &kp N5  &kp N6  &kp PLUS
                &kp F6  &kp F7  &kp F8  &kp F9 &kp F10        &kp ASTRK  &kp N1  &kp N2  &kp N3  &kp MINUS
                                &trans  &trans  &trans        &kp EQUAL &kp N0 &trans
            >;
        };

        Symbol {
            label = "Symbol";
            bindings = <
              &kp EXCL &kp AT  &kp HASH   &kp DLLR    &kp PRCNT        &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR
              &kp GRAVE &c_hm_l LAc_lt 0 &c_hm_l LCTRL 0  &c_hm_l LGUI 0 &c_hm_l LSHFT 0                  &trans &c_hm_r RSHFT LBKT  &c_hm_r RGUI RBKT  &c_hm_r RCTRL APOS &c_hm_r RAc_lt BSLH
              &kp UNDER &kp EXCL  &kp AT     &kp HASH  &kp GRAVE       &trans &kp MINUS &kp EQUAL &trans  &trans
                                  &trans     &trans    &trans          &kp DELETE &trans &trans
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
                         &trans  &trans  &trans  &kp HOME  &kp PAGE_UP         &trans    &trans         &kp TAB      &trans    &trans
                         &trans  &trans  &trans  &kp END  &kp PAGE_DOWN         &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT &trans
                         &trans  &trans  &trans  &trans  &trans         &trans   &trans    &trans         &trans       &trans 
                                         &trans  &trans  &trans         &trans    &trans &trans
            >;
        };

        Media {
            label = "Media";
            bindings = <
              &trans     &trans        &bt BT_CLR_ALL &trans       &trans            &trans      &trans        &bt BT_CLR_ALL  &trans        &trans
              &kp C_MUTE &kp C_VOL_DN  &kp C_VOL_UP     &kp C_PREV &kp C_NEXT        &kp C_PREV  &kp C_NEXT  &kp C_VOL_DN      &kp C_VOL_UP  &kp C_MUTE
              &trans     &trans        &trans         &trans       &trans            &trans      &trans        &trans          &trans        &trans
                                       &kp C_STOP    &kp C_PLAY_PAUSE  &trans        &kp C_PLAY_PAUSE  &kp C_STOP &trans
            >;
        };

        Pointer {
            label = "Pointer";
            bindings = <
              &trans       &trans       &trans        &trans        &trans               &trans &trans        &trans        &trans       &trans
              &kp LGUI     &kp LAc_lt     &kp LCTRL     &kp LSHFT     &trans               &trans &kp RSHFT     &kp RCTRL     &kp RAc_lt     &kp RGUI
              &trans       &mo SCR      &mo SNI       &trans        &trans               &trans &trans        &tog SNI      &tog SCR     &trans
                                            &mkp RCLK  &mkp LCLK  &mkp MCLK         &mkp MCLK  &mkp LCLK &trans
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Sniper {
            label = "Sniper";
            bindings = <
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

    };
};
